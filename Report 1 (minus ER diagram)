!!THE FILE GOT RID OF THE UNDERLINES IN RELATIONS, DON'T TURN IN WITHOUT KEY VALUES IN RELATIONS!!

Connor Bennudriti
Brinley Hull
EECS 447 Databases
Project Report 1
3-8-24

Introduction:
We are managing a Pokemon database with information about each Pokemon, their types, their players, items, and battles. It’s important to keep track of the Pokemon information so that we can know things like which Pokemon belong to which players, what types belong to which Pokemon, who won each battle, etc. A database will also make inserting, removing, and updating each Pokemon from each corresponding table (such as adding a Pokemon to a team, updating a Pokemon weight, etc.) easy.

Requirements Analysis:
Data:
1.	Pokemon: number, name, types, height, weight, combat power, evolution
2.	Player: id, name, color, buddy, pokemon owned, battles & outcomes
3.	Types: name, strengths, weaknesses
4.	Items: name, abilities
Constraints:
1.	A player must have six Pokemon
2.	A player can only have one buddy Pokemon
3.	Player ID must be unique
4.	Item name must be unique;
5.	Pokemon number must be unique
6.	Pokemon can have multiple types
7.	Types can have multiple strengths and weaknesses
8.	A player has a team color
9.	A player can battle another player
10.	There is an outcome to a battle.
11.	An item can have multiple abilities
12.	A type must have a unique name
13.	Domain Constraints:
a.	Player
i.	id: int (key) > 0
ii.	name: string
iii.	team_color: string
b.	Pokemon
i.	poke_num: int (key) > 0
ii.	name: string
iii.	type: string (multivalued)
iv.	height: float (non-negative)
v.	weight: float (non-negative)
vi.	cp: int (non-negative)
c.	Types	
i.	type_name: string (key)
ii.	weak_against: string (multivalued)
iii.	strong_against: string (multivalued)
d.	Items
i.	item_name: string (key)
ii.	ability: string (multivalued)
Operations:
1.	Adding/removing Pokemon to a player
2.	Updating information in Player, Pokemon in team
3.	Adding/deleting entries in Player, Pokemon in team
4.	Battling another player
5.	Player using item
6.	Player assigning buddy pokemon 
Conceptual Design:  ER-diagram

Constraints:
1.	A player must have six Pokemon
2.	A player can have one buddy Pokemon
3.	Pokemon can have multiple types
4.	A player can battle another player
5.	There is an outcome to a battle.
6.	Pokemon have combat power (CP), height, weight, name, and are identified by number.
7.	Types have strengths, weaknesses, and are identified by name
8.	Players have a name, team color, and are identified by their id
9.	Items are identified by their name and also have abilities
10.	Players use items
11.	An item works for specific types

Logical design: Relational Schemas
Player(id, name, color, buddy)
Battle(player1_id, player2_id, outcome)
Pokemon(pokemon_num, pokemon_name, CP, height, weight)
Pokemon_in_Team(player_id, pokemon_num)
Type(type_name)
Type_Strength(type_name, strength)
Type_Weakness(type_name, weakness)
Pokemon_Type(pokemon_num, type_name)
Item(item¬_name)
Item_Ability(item_name, ability)
Player_use_item(player_id, item_name)
Item_worksfor_type(item_name, type_name)

